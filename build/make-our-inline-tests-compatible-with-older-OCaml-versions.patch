From c09d02f65d20c183149698cad56c1d9715b4267a Mon Sep 17 00:00:00 2001
From: Gabriel Scherer <gabriel.scherer@gmail.com>
Date: Sun, 29 Oct 2017 18:06:05 +0100
Subject: [PATCH] make our inline tests compatible with older OCaml versions

Newer qtest versions introduced API changes that makes our code
incompatible with older qtest versions, and they are also incompatible
with some OCaml versions that Batteries support. The present patch
removes all advanced qtest modules from the Batteries inline test
(at the cost of slightly reducing the breadth of the coverage in
some case); applying it should make it possible to test Batteries
under 3.12.1 and 4.00.1 for example.

Please consider rebasing this commit with new changes if the
old-qtest-incompatible features start being used in other places.
---
 src/batArray.mlv       | 22 ++++++++++++----------
 src/batInnerShuffle.ml |  2 +-
 src/batList.mlv        |  5 +++--
 3 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/src/batArray.mlv b/src/batArray.mlv
index 005c4df0..79ee6f94 100644
--- a/src/batArray.mlv
+++ b/src/batArray.mlv
@@ -175,7 +175,7 @@ let findi p xs =
   in
   loop 0
 (*$Q findi
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int Q.bool)) (fun (a, Q.Fun(_,f)) -> \
+  (Q.array Q.small_int) (fun a -> let f n = (n mod 4 = 0) in \
     try let index = findi f a in \
         let i = ref (-1) in \
         for_all (fun elt -> incr i; \
@@ -187,7 +187,7 @@ let findi p xs =
 
 let find p xs = xs.(findi p xs)
 (*$Q find
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int Q.bool)) (fun (a, Q.Fun(_,f)) -> \
+  (Q.array Q.small_int) (fun a -> let f n = (n mod 4 = 0) in \
     let a = map (fun x -> `a x) a in \
     let f (`a x) = f x in\
     try let elt = find f a in \
@@ -217,7 +217,7 @@ let filter p xs =
         assert false
     )
 (*$Q filter
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int Q.bool)) (fun (a, Q.Fun(_,f)) -> \
+  (Q.array Q.small_int) (fun a -> let f n = (n mod 4 = 0) in \
     let b = Array.to_list (filter f a) in \
     let b' = List.filter f (Array.to_list a) in \
     List.for_all (fun (x,y) -> x = y) (List.combine b b') \
@@ -276,7 +276,7 @@ let partition p xs =
         r) in
   xs1, xs2
 (*$Q partition
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int Q.bool)) (fun (a, Q.Fun(_,f)) -> \
+  (Q.array Q.small_int) (fun a -> let f n = (n mod 4 = 0) in \
     let b1, b2 = partition f a in \
     let b1, b2 = Array.to_list b1, Array.to_list b2 in \
     let b1', b2' = List.partition f (Array.to_list a) in \
@@ -370,8 +370,8 @@ let range xs = BatEnum.(--^) 0 (Array.length xs)
 let filter_map p xs =
   of_enum (BatEnum.filter_map p (enum xs))
 (*$Q filter_map
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int (Q.option Q.int))) \
-  (fun (a, Q.Fun (_,f)) -> \
+  (Q.array Q.small_int) (fun a -> \
+    let f n = if (n mod 4 = 0) then Some n else None in \
     let a' = filter (fun elt -> f elt <> None) a in \
     let a' = map (f %> BatOption.get) a' in \
     let a = filter_map f a in \
@@ -661,8 +661,9 @@ let decorate_stable_sort f xs =
     = [|(0,2);(1,2);(1,3);(1,4)|]
 *)
 (*$Q decorate_stable_sort
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int (Q.option Q.int))) \
-    (fun (a, Q.Fun(_,f)) -> is_sorted_by f (decorate_stable_sort f a))
+  (Q.array Q.small_int) (fun a -> \
+    let f n = if (n mod 4 = 0) then Some n else None in \
+    is_sorted_by f (decorate_stable_sort f a))
 *)
 
 let decorate_fast_sort f xs =
@@ -670,8 +671,9 @@ let decorate_fast_sort f xs =
   let () = fast_sort (fun (i,_) (j,_) -> Pervasives.compare i j) decorated in
   map (fun (_,x) -> x) decorated
 (*$Q decorate_fast_sort
-  (Q.pair (Q.array Q.small_int) (Q.fun1 Q.Observable.int (Q.option Q.int))) \
-    (fun (a, Q.Fun(_,f)) -> is_sorted_by f (decorate_fast_sort f a))
+  (Q.array Q.small_int) (fun a -> \
+    let f n = if (n mod 4 = 0) then Some n else None in \
+    is_sorted_by f (decorate_fast_sort f a))
 *)
 
 let bsearch cmp arr x =
diff --git a/src/batInnerShuffle.ml b/src/batInnerShuffle.ml
index 4bcda867..3593a8f8 100644
--- a/src/batInnerShuffle.ml
+++ b/src/batInnerShuffle.ml
@@ -12,7 +12,7 @@ let array_shuffle ?state a =
   done
 
 (*$Q
-  Q.(array_of_size Gen.(2--15) small_int) (fun a -> \
+  Q.(array_of_size (fun _ -> 10) small_int) (fun a -> \
     let a' = Array.copy a in \
     array_shuffle a'; \
     (Array.to_list a' |> List.sort Pervasives.compare) = \
diff --git a/src/batList.mlv b/src/batList.mlv
index 9208b765..d7c5d6ce 100644
--- a/src/batList.mlv
+++ b/src/batList.mlv
@@ -232,8 +232,9 @@ let map f = function
     loop r t;
     inj r
 (*$Q map
-  (Q.pair (Q.fun1 Q.Observable.int Q.int) (Q.list Q.small_int)) \
-  (fun (Q.Fun (_,f),l) -> map f l = List.map f l)
+  (Q.list Q.small_int) (fun l -> \
+    let f n = n+1 in \
+    map f l = List.map f l)
 *)
 
 let rec drop n = function
-- 
2.13.6

